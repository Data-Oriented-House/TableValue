[{"title":"Installation","type":0,"sectionRef":"#","url":"/TableValue/docs/intro","content":"","keywords":""},{"title":"Manually​","type":1,"pageTitle":"Installation","url":"/TableValue/docs/intro#manually","content":"Copy the source code from src/init.luaPaste it into a ModuleScript or file "},{"title":"Wally Package Manager​","type":1,"pageTitle":"Installation","url":"/TableValue/docs/intro#wally-package-manager","content":"Go to wally.run and click the text under Install on the rightPaste it under Dependencies in your wally.toml file "},{"title":"TableValue","type":0,"sectionRef":"#","url":"/TableValue/api/TableValue","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"TableValue","url":"/TableValue/api/TableValue#functions","content":" "},{"title":"new​","type":1,"pageTitle":"TableValue","url":"/TableValue/api/TableValue#new","content":"&lt;/&gt; TableValue.new(tab: T) → T&amp;{ Value: T, Changed: ( key: any, new: any, old: any ) → () } Returns a new proxy table to interface with the .Value table. Does not modify the .Value table or its metatable. local person = TableValue.new { name = 'Jim', age = 9, } function person.Changed(key: string, new, old) print(key, new, old) end person.age += 1 -- print('age', 10, 9) person.Value.age += 1 -- No callback fires, this is how you can perform silent changes! If the callback doesn't suit your fancy, you can make a small wrapper for it to use a signal instead! function MyValue.signal(tab: { [any]: any }) local self = TableValue.new(tab) self.Signal = Signal.new() function self.Callback(key, new, old) self.Signal:Fire(key, new, old) end return self end local person = MyValue.new { name = 'Jim', age = 9, } person.Signal:Connect(function(key: string, new, old) print(key, new, old) end) person.age += 10 -- print('age', 10, 9) person.Value.age += 1 -- No event fires, this is how you can perform silent changes!  "}]