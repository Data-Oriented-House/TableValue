"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[484],{35891:n=>{n.exports=JSON.parse('{"functions":[{"name":"new","desc":"Returns a new proxy table to interface with the `.Value` table. Does not modify the `.Value` table or its metatable.\\n\\n```lua\\nlocal person = TableValue.new {\\n\\tname = \'Jim\',\\n\\tage = 9,\\n}\\n\\nfunction person.Changed(key: string, new, old)\\n\\tprint(key, new, old)\\nend\\n\\nperson.age += 1 -- print(\'age\', 10, 9)\\n\\nperson.Value.age += 1 -- No callback fires, this is how you can perform silent changes!\\n```\\n\\nIf the callback doesn\'t suit your fancy, you can make a small wrapper for it to use a signal instead!\\n\\n```lua\\nfunction MyValue.signal(tab: { [any]: any })\\n\\tlocal self = TableValue.new(tab)\\n\\n\\tself.Signal = Signal.new()\\n\\n\\tfunction self.Changed(key, new, old)\\n\\t\\tself.Signal:Fire(key, new, old)\\n\\tend\\n\\n\\treturn self\\nend\\n\\nlocal person = MyValue.new {\\n\\tname = \'Jim\',\\n\\tage = 9,\\n}\\n\\nperson.Signal:Connect(function(key: string, new, old)\\n\\tprint(key, new, old)\\nend)\\n\\nperson.age += 1 -- print(\'age\', 10, 9)\\n\\nperson.Value.age += 1 -- No event fires, this is how you can perform silent changes!\\n```","params":[{"name":"tab","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"T & { Value: T, Changed: (key: any, new: any, old: any) -> () }"}],"function_type":"static","source":{"line":72,"path":"src/init.lua"}}],"properties":[],"types":[],"name":"TableValue","desc":"","source":{"line":20,"path":"src/init.lua"}}')}}]);